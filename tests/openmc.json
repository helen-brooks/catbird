{
    "blocks": {
        "Problem" : {
            "types": {
                "OpenMCCellAverageProblem": {
                    "description": "Problem extension point for wrapping external applications",
                    "file_info": {
                        "/home/pshriwise/soft/moose_apps/cardinal/src/base/OpenMCCellAverageProblem.C": 48
                    },
                    "label": "CardinalApp",
                    "moose_base": "Problem",
                    "parameters": {
                        "assume_separate_tallies": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "Whether to assume that all tallies added by in the XML files and automatically by Cardinal are spatially separate. This is a performance optimization",
                            "group_name": "",
                            "name": "assume_separate_tallies",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "batch_interval": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "unsigned int",
                            "default": "1",
                            "deprecated": false,
                            "description": "Trigger batch interval",
                            "group_name": "",
                            "name": "batch_interval",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "batches": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "unsigned int",
                            "deprecated": false,
                            "description": "Number of batches to run in OpenMC; this overrides the setting in the XML files.",
                            "group_name": "",
                            "name": "batches",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "block": {
                            "basic_type": "Array:String",
                            "controllable": false,
                            "cpp_type": "std::vector<SubdomainName>",
                            "deprecated": false,
                            "description": "Block IDs for the coordinate systems",
                            "group_name": "",
                            "name": "block",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "check_equal_mapped_tally_volumes": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "Whether to check if the tallied cells map to regions in the mesh of equal volume. This can be helpful to ensure that the volume normalization of OpenMC's tallies doesn't introduce any unintentional distortion just because the mapped volumes are different. You should only set this to true if your OpenMC tally cells are all the same volume!",
                            "group_name": "",
                            "name": "check_equal_mapped_tally_volumes",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "check_identical_tally_cell_fills": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "Whether to check that your model does indeed have identical tally cell fills, allowing you to set 'identical_tally_cell_fills = true' to speed up initialization",
                            "group_name": "",
                            "name": "check_identical_tally_cell_fills",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "check_tally_sum": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "deprecated": false,
                            "description": "Whether to check consistency between the cell-wise kappa fission tallies with a global tally",
                            "group_name": "",
                            "name": "check_tally_sum",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "check_zero_tallies": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "1",
                            "deprecated": false,
                            "description": "Whether to throw an error if any tallies from OpenMC evaluate to zero; this can be helpful in reducing the number of tallies if you inadvertently add tallies to a non-fissile region, or for catching geomtery setup errors",
                            "group_name": "",
                            "name": "check_zero_tallies",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "control_tags": {
                            "basic_type": "Array:String",
                            "controllable": false,
                            "cpp_type": "std::vector<std::string>",
                            "deprecated": false,
                            "description": "Adds user-defined labels for accessing object parameters via control logic.",
                            "group_name": "Advanced",
                            "name": "control_tags",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "coord_type": {
                            "basic_type": "Array:String",
                            "controllable": false,
                            "cpp_type": "MultiMooseEnum",
                            "default": "XYZ",
                            "deprecated": false,
                            "description": "Type of the coordinate system per block param",
                            "group_name": "",
                            "name": "coord_type",
                            "options": "XYZ RZ RSPHERICAL",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "default_ghosting": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "Whether or not to use libMesh's default amount of algebraic and geometric ghosting",
                            "group_name": "Advanced",
                            "name": "default_ghosting",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "enable": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "1",
                            "deprecated": false,
                            "description": "Set the enabled status of the MooseObject.",
                            "group_name": "Advanced",
                            "name": "enable",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "error_on_jacobian_nonzero_reallocation": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "deprecated": false,
                            "description": "This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros",
                            "group_name": "",
                            "name": "error_on_jacobian_nonzero_reallocation",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "export_properties": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "Whether to export OpenMC's temperature and density properties after updating them in the syncSolutions call.",
                            "group_name": "",
                            "name": "export_properties",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "extra_tag_matrices": {
                            "basic_type": "Array:String",
                            "controllable": false,
                            "cpp_type": "std::vector<TagName>",
                            "deprecated": false,
                            "description": "Extra matrices to add to the system that can be filled by objects which compute residuals and Jacobians (Kernels, BCs, etc.) by setting tags on them.",
                            "group_name": "",
                            "name": "extra_tag_matrices",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "extra_tag_solutions": {
                            "basic_type": "Array:String",
                            "controllable": false,
                            "cpp_type": "std::vector<TagName>",
                            "deprecated": false,
                            "description": "Extra solution vectors to add to the system that can be used by objects for coupling variable values stored in them.",
                            "group_name": "",
                            "name": "extra_tag_solutions",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "extra_tag_vectors": {
                            "basic_type": "Array:String",
                            "controllable": false,
                            "cpp_type": "std::vector<TagName>",
                            "deprecated": false,
                            "description": "Extra vectors to add to the system that can be filled by objects which compute residuals and Jacobians (Kernels, BCs, etc.) by setting tags on them.",
                            "group_name": "",
                            "name": "extra_tag_vectors",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "first_iteration_particles": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "long",
                            "deprecated": false,
                            "description": "Number of particles to use for first iteration when using Dufek-Gudowski relaxation",
                            "group_name": "",
                            "name": "first_iteration_particles",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "fluid_blocks": {
                            "basic_type": "Array:String",
                            "controllable": false,
                            "cpp_type": "std::vector<SubdomainName>",
                            "deprecated": false,
                            "description": "Subdomain ID(s) corresponding to the fluid phase, for which both density and temperature will be sent to OpenMC",
                            "group_name": "",
                            "name": "fluid_blocks",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "fluid_cell_level": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "unsigned int",
                            "deprecated": false,
                            "description": "Coordinate level in OpenMC to stop at for identifying fluid cells",
                            "group_name": "",
                            "name": "fluid_cell_level",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "force_restart": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "EXPERIMENTAL: If true, a sub_app may use a restart file instead of using of using the master backup file",
                            "group_name": "",
                            "name": "force_restart",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "fv_bcs_integrity_check": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "1",
                            "deprecated": false,
                            "description": "Set to false to disable checking of overlapping Dirichlet and Flux BCs and/or multiple DirichletBCs per sideset",
                            "group_name": "",
                            "name": "fv_bcs_integrity_check",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "identical_tally_cell_fills": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "Whether the tallied cells have identical fill universes; this is an optimization to speed up initialization for TRISO problems where each TRISO pebble/compact/plate/etc. has exactly the same universe filling it.",
                            "group_name": "",
                            "name": "identical_tally_cell_fills",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "ignore_zeros_in_jacobian": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "Do not explicitly store zero values in the Jacobian matrix if true",
                            "group_name": "",
                            "name": "ignore_zeros_in_jacobian",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "inactive_batches": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "unsigned int",
                            "deprecated": false,
                            "description": "Number of inactive batches to run in OpenMC; this overrides the setting in the XML files.",
                            "group_name": "",
                            "name": "inactive_batches",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "initial_properties": {
                            "basic_type": "String",
                            "controllable": false,
                            "cpp_type": "MooseEnum",
                            "default": "moose",
                            "deprecated": false,
                            "description": "Where to read the temperature and density initial conditions for the OpenMC mdoel; options: hdf5, moose (default), or xml.",
                            "group_name": "",
                            "name": "initial_properties",
                            "options": "hdf5 moose xml",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "k_trigger": {
                            "basic_type": "String",
                            "controllable": false,
                            "cpp_type": "MooseEnum",
                            "default": "none",
                            "deprecated": false,
                            "description": "Trigger criterion to determine when OpenMC simulation is complete based on k; options: variance, std_dev, rel_err, none (default)",
                            "group_name": "",
                            "name": "k_trigger",
                            "options": "variance std_dev rel_err none",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "k_trigger_threshold": {
                            "basic_type": "Real",
                            "controllable": false,
                            "cpp_type": "double",
                            "deprecated": false,
                            "description": "Threshold for the k trigger",
                            "group_name": "",
                            "name": "k_trigger_threshold",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "kernel_coverage_check": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "1",
                            "deprecated": false,
                            "description": "Set to false to disable kernel->subdomain coverage check",
                            "group_name": "",
                            "name": "kernel_coverage_check",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "lowest_fluid_cell_level": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "unsigned int",
                            "deprecated": false,
                            "description": "Lowest coordinate level in OpenMC to use for identifying fluid cells",
                            "group_name": "",
                            "name": "lowest_fluid_cell_level",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "lowest_solid_cell_level": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "unsigned int",
                            "deprecated": false,
                            "description": "Lowest coordinate level in OpenMC to use for identifying solid cells",
                            "group_name": "",
                            "name": "lowest_solid_cell_level",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "material_coverage_check": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "1",
                            "deprecated": false,
                            "description": "Set to false to disable material->subdomain coverage check",
                            "group_name": "",
                            "name": "material_coverage_check",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "material_dependency_check": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "1",
                            "deprecated": false,
                            "description": "Set to false to disable material dependency check",
                            "group_name": "",
                            "name": "material_dependency_check",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "max_batches": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "unsigned int",
                            "deprecated": false,
                            "description": "Maximum number of batches, when using triggers",
                            "group_name": "",
                            "name": "max_batches",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "mesh_template": {
                            "basic_type": "String",
                            "controllable": false,
                            "cpp_type": "std::string",
                            "deprecated": false,
                            "description": "Mesh tally template for OpenMC when using mesh tallies; at present, this mesh must exactly match the mesh used in the [Mesh] block because a one-to-one copy is used to get OpenMC's tally results on the [Mesh] in preparation for transfer to another App.",
                            "group_name": "",
                            "name": "mesh_template",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "mesh_translations": {
                            "basic_type": "Array:Array:Real",
                            "controllable": false,
                            "cpp_type": "std::vector<libMesh::Point>",
                            "deprecated": false,
                            "description": "Coordinates to which each mesh template should be translated, if multiple unstructured meshes are desired.",
                            "group_name": "",
                            "name": "mesh_translations",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "mesh_translations_file": {
                            "basic_type": "Array:String",
                            "controllable": false,
                            "cpp_type": "std::vector<FileName>",
                            "deprecated": false,
                            "description": "File providing the coordinates to which each mesh template should be translated, if multiple unstructured meshes are desired.",
                            "group_name": "",
                            "name": "mesh_translations_file",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "near_null_space_dimension": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "unsigned int",
                            "default": "0",
                            "deprecated": false,
                            "description": "The dimension of the near nullspace",
                            "group_name": "",
                            "name": "near_null_space_dimension",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "normalize_by_global_tally": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "1",
                            "deprecated": false,
                            "description": "Whether to normalize by a global kappa-fission tally (true) or else by the sum of the local tally (false)",
                            "group_name": "",
                            "name": "normalize_by_global_tally",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "null_space_dimension": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "unsigned int",
                            "default": "0",
                            "deprecated": false,
                            "description": "The dimension of the nullspace",
                            "group_name": "",
                            "name": "null_space_dimension",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "openmc_verbosity": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "unsigned int",
                            "deprecated": false,
                            "description": "OpenMC verbosity level; this overrides the setting in the XML files",
                            "group_name": "",
                            "name": "openmc_verbosity",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "output": {
                            "basic_type": "Array:String",
                            "controllable": false,
                            "cpp_type": "MultiMooseEnum",
                            "deprecated": false,
                            "description": "Field(s) to output from OpenMC onto the mesh mirror",
                            "group_name": "",
                            "name": "output",
                            "options": "fission_tally_std_dev fission_tally",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "parallel_barrier_messaging": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "Displays messaging from parallel barrier notifications when executing or transferring to/from Multiapps (default: false)",
                            "group_name": "",
                            "name": "parallel_barrier_messaging",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "particles": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "long",
                            "deprecated": false,
                            "description": "Number of particles to run in each OpenMC batch; this overrides the setting in the XML files.",
                            "group_name": "",
                            "name": "particles",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "power": {
                            "basic_type": "Real",
                            "controllable": false,
                            "cpp_type": "double",
                            "deprecated": false,
                            "description": "Power (Watts) to normalize the OpenMC tallies",
                            "group_name": "",
                            "name": "power",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": true
                        },
                        "previous_nl_solution_required": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "True to indicate that this calculation requires a solution vector for storing the prvious nonlinear iteration.",
                            "group_name": "",
                            "name": "previous_nl_solution_required",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "relaxation": {
                            "basic_type": "String",
                            "controllable": false,
                            "cpp_type": "MooseEnum",
                            "default": "none",
                            "deprecated": false,
                            "description": "Type of relaxation to apply to the OpenMC solution, options: constant, robbins_monro, dufek_gudowski, none (default)",
                            "group_name": "",
                            "name": "relaxation",
                            "options": "constant robbins_monro dufek_gudowski none",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "relaxation_factor": {
                            "basic_type": "Real",
                            "controllable": false,
                            "cpp_type": "double",
                            "default": "0.5",
                            "deprecated": false,
                            "description": "Relaxation factor for use with constant relaxation",
                            "group_name": "",
                            "name": "relaxation_factor",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "restart_file_base": {
                            "basic_type": "String",
                            "controllable": false,
                            "cpp_type": "FileNameNoExtension",
                            "deprecated": false,
                            "description": "File base name used for restart (e.g. <path>/<filebase> or <path>/LATEST to grab the latest file available)",
                            "group_name": "",
                            "name": "restart_file_base",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "reuse_source": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "Whether to take the initial fission source for interation n to be the converged source bank from iteration n-1",
                            "group_name": "",
                            "name": "reuse_source",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "rz_coord_axis": {
                            "basic_type": "String",
                            "controllable": false,
                            "cpp_type": "MooseEnum",
                            "default": "Y",
                            "deprecated": false,
                            "description": "The rotation axis (X | Y) for axisymetric coordinates",
                            "group_name": "",
                            "name": "rz_coord_axis",
                            "options": "X Y",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "scaling": {
                            "basic_type": "Real",
                            "controllable": false,
                            "cpp_type": "double",
                            "default": "1",
                            "deprecated": false,
                            "description": "Scaling factor to apply to mesh to get to units of centimeters that OpenMC expects; setting 'scaling = 100.0', for instance, indicates that the mesh is in units of meters",
                            "group_name": "",
                            "name": "scaling",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "skip_additional_restart_data": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "True to skip additional data in equation system for restart. It is useful for starting a transient calculation with a steady-state solution",
                            "group_name": "",
                            "name": "skip_additional_restart_data",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "skip_first_incoming_transfer": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "Whether to skip the very first density and temperature transfer into OpenMC; this can be used to allow whatever initial condition is set in OpenMC's XML files to be used in OpenMC's run the first time OpenMC is run",
                            "group_name": "",
                            "name": "skip_first_incoming_transfer",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "skip_nl_system_check": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "1",
                            "deprecated": false,
                            "description": "True to skip the NonlinearSystem check for work to do (e.g. Make sure that there are variables to solve for).",
                            "group_name": "",
                            "name": "skip_nl_system_check",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "solid_blocks": {
                            "basic_type": "Array:String",
                            "controllable": false,
                            "cpp_type": "std::vector<SubdomainName>",
                            "deprecated": false,
                            "description": "Subdomain ID(s) corresponding to the solid phase, for which temperature will be sent to OpenMC",
                            "group_name": "",
                            "name": "solid_blocks",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "solid_cell_level": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "unsigned int",
                            "deprecated": false,
                            "description": "Coordinate level in OpenMC to use for identifying solid cells",
                            "group_name": "",
                            "name": "solid_cell_level",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "solve": {
                            "basic_type": "Boolean",
                            "controllable": true,
                            "cpp_type": "bool",
                            "default": "1",
                            "deprecated": false,
                            "description": "Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything",
                            "group_name": "",
                            "name": "solve",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "symmetry_angle": {
                            "basic_type": "Real",
                            "controllable": false,
                            "cpp_type": "double",
                            "deprecated": false,
                            "description": "Angle (degrees) from symmetry plane for which OpenMC model is symmetric",
                            "group_name": "",
                            "name": "symmetry_angle",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "symmetry_axis": {
                            "basic_type": "Array:Real",
                            "controllable": false,
                            "cpp_type": "libMesh::Point",
                            "deprecated": false,
                            "description": "Axis about which to rotate for angle-symmetric OpenMC models",
                            "group_name": "",
                            "name": "symmetry_axis",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "symmetry_plane_normal": {
                            "basic_type": "Array:Real",
                            "controllable": false,
                            "cpp_type": "libMesh::Point",
                            "deprecated": false,
                            "description": "Normal that defines a symmetry plane in the OpenMC model",
                            "group_name": "",
                            "name": "symmetry_plane_normal",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "tally_blocks": {
                            "basic_type": "Array:String",
                            "controllable": false,
                            "cpp_type": "std::vector<SubdomainName>",
                            "deprecated": false,
                            "description": "Subdomain ID(s) for which to add tallies in the OpenMC model; only used with cell tallies",
                            "group_name": "",
                            "name": "tally_blocks",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "tally_trigger": {
                            "basic_type": "String",
                            "controllable": false,
                            "cpp_type": "MooseEnum",
                            "default": "none",
                            "deprecated": false,
                            "description": "Trigger criterion to determine when OpenMC simulation is complete based on tallies; options: variance, std_dev, rel_err, none (default)",
                            "group_name": "",
                            "name": "tally_trigger",
                            "options": "variance std_dev rel_err none",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "tally_trigger_threshold": {
                            "basic_type": "Real",
                            "controllable": false,
                            "cpp_type": "double",
                            "deprecated": false,
                            "description": "Threshold for the tally trigger",
                            "group_name": "",
                            "name": "tally_trigger_threshold",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "tally_type": {
                            "basic_type": "String",
                            "controllable": false,
                            "cpp_type": "MooseEnum",
                            "deprecated": false,
                            "description": "Type of tally to use in OpenMC, options: cell, mesh",
                            "group_name": "",
                            "name": "tally_type",
                            "options": "cell mesh",
                            "out_of_range_allowed": false,
                            "required": true
                        },
                        "temperature_blocks": {
                            "basic_type": "Array:String",
                            "controllable": false,
                            "cpp_type": "std::vector<SubdomainName>",
                            "deprecated": false,
                            "description": "Blocks corresponding to each of the 'temperature_variables'",
                            "group_name": "",
                            "name": "temperature_blocks",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "temperature_variables": {
                            "basic_type": "Array:String",
                            "controllable": false,
                            "cpp_type": "std::vector<std::string>",
                            "deprecated": false,
                            "description": "Vector of variable names corresponding to the temperatures that should be assembled into the 'temp' variable from which OpenMC reads cell temperatures. You may use this if multiple applications are providing temperature to OpenMC, which need to be collated together into a single variable",
                            "group_name": "",
                            "name": "temperature_variables",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "transpose_null_space_dimension": {
                            "basic_type": "Integer",
                            "controllable": false,
                            "cpp_type": "unsigned int",
                            "default": "0",
                            "deprecated": false,
                            "description": "The dimension of the transpose nullspace",
                            "group_name": "",
                            "name": "transpose_null_space_dimension",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "type": {
                            "basic_type": "String",
                            "controllable": false,
                            "cpp_type": "std::string",
                            "default": "OpenMCCellAverageProblem",
                            "deprecated": false,
                            "description": "",
                            "group_name": "",
                            "name": "type",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "use_nonlinear": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "1",
                            "deprecated": false,
                            "description": "Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)",
                            "group_name": "",
                            "name": "use_nonlinear",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        },
                        "verbose": {
                            "basic_type": "Boolean",
                            "controllable": false,
                            "cpp_type": "bool",
                            "default": "0",
                            "deprecated": false,
                            "description": "Whether to print diagnostic information",
                            "group_name": "",
                            "name": "verbose",
                            "options": "",
                            "out_of_range_allowed": false,
                            "required": false
                        }
                    },
                    "parent_syntax": "Problem",
                    "register_file": "/home/pshriwise/soft/moose_apps/cardinal/src/base/OpenMCCellAverageProblem.C",
                    "syntax_path": "Problem/<type>/OpenMCCellAverageProblem"
                }
            }
        }
    }
}
